// Code generated by MockGen. DO NOT EDIT.
// Source: image-previewer/internal/domain (interfaces: PreviewRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	image "image"
	domain "image-previewer/internal/domain"
	reflect "reflect"
)

// MockPreviewRepository is a mock of PreviewRepository interface
type MockPreviewRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPreviewRepositoryMockRecorder
}

// MockPreviewRepositoryMockRecorder is the mock recorder for MockPreviewRepository
type MockPreviewRepositoryMockRecorder struct {
	mock *MockPreviewRepository
}

// NewMockPreviewRepository creates a new mock instance
func NewMockPreviewRepository(ctrl *gomock.Controller) *MockPreviewRepository {
	mock := &MockPreviewRepository{ctrl: ctrl}
	mock.recorder = &MockPreviewRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPreviewRepository) EXPECT() *MockPreviewRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockPreviewRepository) Add(arg0 domain.ImageID, arg1 image.Image) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add
func (mr *MockPreviewRepositoryMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPreviewRepository)(nil).Add), arg0, arg1)
}

// FindOne mocks base method
func (m *MockPreviewRepository) FindOne(arg0 domain.ImageID) (image.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", arg0)
	ret0, _ := ret[0].(image.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne
func (mr *MockPreviewRepositoryMockRecorder) FindOne(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockPreviewRepository)(nil).FindOne), arg0)
}
